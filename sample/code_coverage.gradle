apply plugin: 'jacoco'

jacoco {
    toolVersion "0.7.1.201405082137"
}

task mergedJacocoTestReport(type:JacocoReport, dependsOn: 'connectedCheck') {

    group = 'Reporting'

    description = 'Generate Jacoco coverage reports'

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*IScript*.*',
                      'android/**/*.*',
                      '**/**_ViewBinding.*',
                      '**/**_ViewBinding$*']

    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug",
            excludes: fileFilter)

    def libraryDebugTree = fileTree(dir: "${rootProject.childProjects['material-stepper'].buildDir}/intermediates/classes/debug",
            excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"
    def libSrc = "${rootProject.projectDir}/material-stepper/src/main/java"

    sourceDirectories = files([mainSrc, libSrc])
    classDirectories = files([debugTree, libraryDebugTree])

    def androidTestExecutionData = fileTree(dir: "${project.buildDir}/outputs/code-coverage/connected", includes: ['**/*.exec', '**/*.ec'])
    def unitTestExecutionData = fileTree(dir: rootProject.childProjects['material-stepper'].projectDir, includes: ['**/*.exec', '**/*.ec'])

    executionData = files ([androidTestExecutionData, unitTestExecutionData])

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco")
    }

    mustRunAfter ':material-stepper:testDebugUnitTest'
}