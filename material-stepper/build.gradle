apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven'
apply from: '../material-stepper/code_coverage.gradle'
apply from: '../config/quality/quality.gradle'

android {
    compileSdkVersion project.androidCompileSdkVersion

    defaultConfig {
        minSdkVersion project.androidMinSdkVersion
        targetSdkVersion project.androidTargetSdkVersion
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        //workaround so that code coverage is working with Robolectric: http://stackoverflow.com/a/35769943/973379
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        //fixes https://github.com/robolectric/robolectric/issues/3169#issuecomment-312046322
        unitTests.includeAndroidResources = true
    }

    lintOptions {
        warningsAsErrors true
        disable 'RequiredSize', 'ClickableViewAccessibility'
    }
}

dependencies {
    api "com.android.support:appcompat-v7:$androidSupportLibraryVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "com.squareup.assertj:assertj-android:$assertjVersion"
    testImplementation("org.robolectric:robolectric:$robolectricVersion") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    //testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion"
}

gradle.taskGraph.beforeTask { Task task ->
    if (task instanceof Javadoc) {
        def releaseVariant = android.libraryVariants.find { it.buildType.name == 'release' }
        Javadoc javadocTask = (Javadoc) task
        javadocTask.source = android.sourceSets.main.java.srcDirs
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        javadocTask.classpath = files(releaseVariant.javaCompile.classpath.files) + files(ext.androidJar)
    }
}

// Log out test results to console
tasks.matching { it instanceof Test}.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

task ('checkWithCoverage') {
    dependsOn 'checkstyle', 'findbugs', 'pmd', 'jacocoTestReport', 'lintDebug'
}

ext {
    artifact = POM_ARTIFACT_ID
}

apply from: '../installv1.gradle'
apply from: '../bintrayv1.gradle'

install.mustRunAfter check